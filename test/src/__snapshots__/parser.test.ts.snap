// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser chars 1`] = `
"Program [
	JASSFunction {
		name: String \\"a\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"i\\"
				value: Number 97
			}
		]
	}
]"
`;

exports[`parser comments multiline 1`] = `
"Program [
	Comment \\" multi\\\\nline\\\\ncomments \\"
	EmptyLine {}
]"
`;

exports[`parser comments single line 1`] = `
"Program [
	Comment \\" single line comment\\"
]"
`;

exports[`parser debug 1`] = `
"Program [
	JASSFunction {
		name: String \\"a\\"
		statements: Statements [
			Debug {
				statement: Variable {
					type: String \\"integer\\"
					name: String \\"i\\"
					value: Number 97
				}
			}
		]
	}
]"
`;

exports[`parser edge cases multiple left expressions 1`] = `
"Program [
	Globals {
		globals: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"test\\"
				value: BinaryOp {
					left: BinaryOp {
						left: BinaryOp {
							left: BinaryOp {
								left: Name \\"a\\"
								operator: String \\"==\\"
								right: ArrayRef {
									name: String \\"b\\"
									prop: Name \\"c\\"
								}
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"d\\"
								operator: String \\"==\\"
								right: ArrayRef {
									name: String \\"e\\"
									prop: Name \\"f\\"
								}
							}
						}
						operator: String \\"or\\"
						right: BinaryOp {
							left: Name \\"g\\"
							operator: String \\"==\\"
							right: ArrayRef {
								name: String \\"h\\"
								prop: Name \\"i\\"
							}
						}
					}
					operator: String \\"or\\"
					right: Name \\"j\\"
				}
			}
		]
	}
]"
`;

exports[`parser functions calls with lots of parens 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			Call {
				name: String \\"SaveStr\\"
				args: Args [
					Name \\"A\\"
					Parens Parens Parens ArrayRef {
						name: String \\"B\\"
						prop: Name \\"i\\"
					}
					Parens UnaryOp {
						operator: String \\"-\\"
						expr: Name \\"xG\\"
					}
					Parens Name \\"oG\\"
				]
				statement: Boolean true
			}
		]
	}
]"
`;

exports[`parser functions comments 1`] = `
"Program [
	JASSFunction {
		name: String \\"funcName\\"
		params: Params [
			Param {
				type: String \\"argType1\\"
				name: String \\"argName1\\"
			}
			Param {
				type: String \\"argType2\\"
				name: String \\"argName2\\"
			}
		]
		returns: String \\"returnType\\"
		comment: Comment \\"function-comment\\"
		statements: Statements [
			EmptyLine {}
			Comment \\"internal-comment\\"
			EmptyLine {}
		]
		endComment: Comment \\"endfunction-comment\\"
	}
]"
`;

exports[`parser functions locals can define locals 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			Variable {
				type: String \\"varType1\\"
				name: String \\"varName1\\"
			}
			EmptyLine {}
			Variable {
				type: String \\"varType2\\"
				name: String \\"varName2\\"
				value: String \\"string with \\\\\\\\\\\\\\"quotes\\\\\\\\\\\\\\"\\"
			}
			Variable {
				type: String \\"varType3\\"
				name: String \\"varName3\\"
				value: FourCC \\"abcd\\"
			}
			EmptyLine {}
			Variable {
				type: String \\"varType4\\"
				name: String \\"varName4\\"
				value: Number 0
			}
			Variable {
				type: String \\"varType5\\"
				name: String \\"varName5\\"
				value: Number 8
			}
			Variable {
				type: String \\"varType6\\"
				name: String \\"varName6\\"
				value: Number 16
			}
			Variable {
				type: String \\"varType7\\"
				name: String \\"varName7\\"
				value: Number 16
			}
			EmptyLine {}
			Variable {
				type: String \\"varType8\\"
				name: String \\"varName8\\"
				value: Number 0.1
			}
			EmptyLine {}
			Variable {
				type: String \\"varType9\\"
				name: String \\"varName9\\"
				value: Boolean true
			}
			Variable {
				type: String \\"varType10\\"
				name: String \\"varName10\\"
				value: Boolean false
			}
			EmptyLine {}
			Variable {
				type: String \\"varType11\\"
				name: String \\"varName11\\"
				value: Parens BinaryOp {
					left: Number 1
					operator: String \\"+\\"
					right: Number 2
				}
			}
			Variable {
				type: String \\"varType12\\"
				name: String \\"varName12\\"
				value: Name \\"varName11\\"
			}
		]
	}
]"
`;

exports[`parser functions multiple functions 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"bar\\"
	}
]"
`;

exports[`parser globals commented 1`] = `
"Program [
	Globals {
		comment: Comment \\"foo\\"
		globals: Statements [
			Comment \\"bar\\"
		]
		endComment: Comment \\"baz\\"
	}
]"
`;

exports[`parser globals empty globals block 1`] = `
"Program [
	Globals {}
]"
`;

exports[`parser globals with globals 1`] = `
"Program [
	Globals {
		globals: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"sheep\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"salesTax\\"
				value: Number 1.5
			}
			Variable {
				type: String \\"real\\"
				name: String \\"specialTax\\"
				value: Name \\"salesTax\\"
			}
		]
	}
]"
`;

exports[`parser if-then-else else 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			IfThenElse {
				condition: Boolean true
				then: Statements [
					JASSSet {
						name: String \\"bar\\"
						value: Name \\"buz\\"
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bar\\"
								value: Name \\"qux\\"
							}
						]
					}
				]
			}
		]
	}
]"
`;

exports[`parser if-then-else elseif 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			IfThenElse {
				condition: Boolean true
				then: Statements [
					JASSSet {
						name: String \\"bar\\"
						value: Name \\"buz\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: Boolean false
						statements: Statements [
							JASSSet {
								name: String \\"bar\\"
								value: Name \\"qux\\"
							}
						]
					}
				]
			}
		]
	}
]"
`;

exports[`parser if-then-else elseif with else 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			IfThenElse {
				condition: Boolean true
				then: Statements [
					JASSSet {
						name: String \\"bar\\"
						value: Name \\"buz\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: Boolean false
						statements: Statements [
							JASSSet {
								name: String \\"bar\\"
								value: Name \\"qux\\"
							}
						]
					}
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bar\\"
								value: Name \\"thud\\"
							}
						]
					}
				]
			}
		]
	}
]"
`;

exports[`parser if-then-else empty 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			IfThenElse {
				condition: Boolean true
			}
		]
	}
]"
`;

exports[`parser if-then-else simple 1`] = `
"Program [
	JASSFunction {
		name: String \\"foo\\"
		statements: Statements [
			IfThenElse {
				condition: Boolean true
				then: Statements [
					JASSSet {
						name: String \\"bar\\"
						value: Name \\"buz\\"
					}
				]
			}
		]
	}
]"
`;

exports[`parser natives 1`] = `
"Program [
	Native {
		name: String \\"FuncName\\"
		params: Params [
			Param {
				type: String \\"argType1\\"
				name: String \\"argName1\\"
			}
			Param {
				type: String \\"argType2\\"
				name: String \\"argName2\\"
			}
		]
		returns: String \\"returnType\\"
		comment: Comment \\"with comments\\"
	}
	Native {
		name: String \\"foo\\"
		constant: Boolean true
	}
]"
`;

exports[`parser types works 1`] = `
"Program [
	Type {
		base: String \\"a\\"
		super: String \\"handle\\"
	}
	Type {
		base: String \\"c\\"
		super: String \\"d\\"
		comment: Comment \\"with comment\\"
	}
]"
`;
